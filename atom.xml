<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="https://www.w3.org/2005/Atom">
  <title>jthu的博客</title>
  
  <subtitle>后端技术</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="https://hicker000.github.io/"/>
  <updated>2019-11-10T09:29:21.369Z</updated>
  <id>https://hicker000.github.io/</id>
  
  <author>
    <name>jthu</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Spring Boot Actuator监控端点</title>
    <link href="https://hicker000.github.io/2019/11/10/Spring-Boot-Actuator%E7%9B%91%E6%8E%A7%E7%AB%AF%E7%82%B9/"/>
    <id>https://hicker000.github.io/2019/11/10/Spring-Boot-Actuator%E7%9B%91%E6%8E%A7%E7%AB%AF%E7%82%B9/</id>
    <published>2019-11-10T09:25:45.000Z</published>
    <updated>2019-11-10T09:29:21.369Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Spring-Boot-Actuator监控端点"><a href="#Spring-Boot-Actuator监控端点" class="headerlink" title="Spring Boot Actuator监控端点"></a>Spring Boot Actuator监控端点</h2><ul><li><a href="#1">一,初识Actuator</a></li><li><a href="#2">二,原生端点</a><ul><li><a href="#2.1">2.1 应用配置类</a><ul><li><a href="#2.1.1">autoconfig</a></li><li><a href="#2.1.2">beans</a></li><li><a href="#2.1.3">configprops</a></li><li><a href="#2.1.4">env</a></li><li><a href="#2.1.5">mappings</a></li><li><a href="#2.1.6">info</a></li></ul></li><li><a href="#2.2">2.2 度量指标类</a><ul><li><a href="#2.2.1">metrics</a></li><li><a href="#2.2.2">health</a></li><li><a href="#2.2.3">dump</a></li><li><a href="#2.2.4">trace</a></li></ul></li><li><a href="#2.3">2.3 操作控制类</a></li></ul></li></ul><p>在Spring Boot的众多Starter POMs中有一个特殊的模块，它不同于其他模块那样大多用于开发业务功能或是连接一些其他外部资源。它完全是一个用于暴露自身信息的模块，所以很明显，它的主要作用是用于监控与管理，它就是：spring-boot-starter-actuator。</p><h2 id="一-初识Actuator"><a href="#一-初识Actuator" class="headerlink" title="一,初识Actuator"></a><span id="1">一,初识Actuator</h2><p>下面，我们可以通过对快速入门中实现的Spring Boot应用增加spring-boot-starter-actuator模块功能，来对它有一个直观的认识。</p><p>在现有的Spring Boot应用中引入该模块非常简单，只需要在pom.xml的dependencies节点中，新增spring-boot-starter-actuator的依赖即可，具体如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;dependency&gt;</span><br><span class="line">  &lt;groupId&gt;org.springframework.boot&lt;/groupId&gt;</span><br><span class="line">  &lt;artifactId&gt;spring-boot-starter-actuator&lt;/artifactId&gt;</span><br><span class="line">&lt;/dependency&gt;</span><br></pre></td></tr></table></figure><p>通过增加该依赖之后，重新启动应用。此时，我们可以在控制台中看到如下图所示的输出：</p><p><img src="B73FD621480E4DAF95FFDD0690A8D669" alt="image"></p><p>上图显示了一批端点定义，这些端点并非我们自己在程序中创建，而是由spring-boot-starter-actuator模块根据应用依赖和配置自动创建出来的监控和管理端点。通过这些端点，我们可以实时的获取应用的各项监控指标，比如：访问<br>==/health==端点，我们可以获得如下返回的应用健康信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;status&quot;: &quot;UP&quot;,</span><br><span class="line">    &quot;diskSpace&quot;: &#123;</span><br><span class="line">        &quot;status&quot;: &quot;UP&quot;,</span><br><span class="line">        &quot;total&quot;: 491270434816,</span><br><span class="line">        &quot;free&quot;: 383870214144,</span><br><span class="line">        &quot;threshold&quot;: 10485760</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h2 id="二-原生端点"><a href="#二-原生端点" class="headerlink" title="二,原生端点"></a><span id="2">二,原生端点</h2><p>通过在快速入门示例中添加==spring-boot-starter-actuator==模块，我们已经对它有了一个初步的认识。接下来，我们详细介绍一下==spring-boot-starter-actuator==模块中已经实现的一些原生端点。如果根据端点的作用来说，我们可以原生端点分为三大类：</p><ul><li>应用配置类：获取应用程序中加载的应用配置、环境变量、自动化配置报告等与Spring Boot应用密切相关的配置类信息。</li><li>度量指标类：获取应用程序运行过程中用于监控的度量指标，比如：内存信息、线程池信息、HTTP请求统计等。</li><li>操作控制类：提供了对应用的关闭等操作类功能。</li></ul><p>下面我们来详细了解一下这三类端点都分别可以为我们提供怎么样的有用信息和强大功能，以及我们如何去扩展和配置它们。</p><h3 id="2-1-应用配置类"><a href="#2-1-应用配置类" class="headerlink" title="2.1 应用配置类"></a><span id="2.1">2.1 应用配置类</h3><p>由于Spring Boot为了改善传统Spring应用繁杂的配置内容，采用了包扫描和自动化配置的机制来加载原本集中于xml文件中的各项内容。虽然这样的做法，让我们的代码变得非常简洁，但是整个应用的实例创建和依赖关系等信息都被离散到了各个配置类的注解上，这使得我们分析整个应用中资源和实例的各种关系变得非常的困难。而这类端点就可以帮助我们轻松的获取一系列关于Spring 应用配置内容的详细报告，比如：自动化配置的报告、Bean创建的报告、环境属性的报告等。</p><h4 id="autoconfig："><a href="#autoconfig：" class="headerlink" title="/autoconfig："></a><span id="2.1.1">/autoconfig：</h4><p>该端点用来获取应用的自动化配置报告，其中包括所有自动化配置的候选项。同时还列出了每个候选项自动化配置的各个先决条件是否满足。所以，该端点可以帮助我们方便的找到一些自动化配置为什么没有生效的具体原因。该报告内容将自动化配置内容分为两部分：</p><ul><li><strong>positiveMatches</strong>中返回的是条件匹配成功的自动化配置</li><li><strong>negativeMatches</strong>中返回的是条件匹配不成功的自动化配置</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;positiveMatches&quot;: &#123; // 条件匹配成功的</span><br><span class="line">        &quot;EndpointWebMvcAutoConfiguration&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;condition&quot;: &quot;OnClassCondition&quot;,</span><br><span class="line">                &quot;message&quot;: &quot;@ConditionalOnClass classes found: javax.servlet.Servlet,org.springframework.web.servlet.DispatcherServlet&quot;</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;condition&quot;: &quot;OnWebApplicationCondition&quot;,</span><br><span class="line">                &quot;message&quot;: &quot;found web application StandardServletEnvironment&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;negativeMatches&quot;: &#123;  // 条件不匹配成功的</span><br><span class="line">        &quot;HealthIndicatorAutoConfiguration.DataSourcesHealthIndicatorConfiguration&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;condition&quot;: &quot;OnClassCondition&quot;,</span><br><span class="line">                &quot;message&quot;: &quot;required @ConditionalOnClass classes not found: org.springframework.jdbc.core.JdbcTemplate&quot;</span><br><span class="line">            &#125;</span><br><span class="line">        ],</span><br><span class="line">        ...</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从如上示例中我们可以看到，每个自动化配置候选项中都有一系列的条件，比如上面没有成功匹配的==HealthIndicatorAutoConfiguration.DataSourcesHealthIndicatorConfiguration==配置，它的先决条件就是需要在工程中包含==org.springframework.jdbc.core.JdbcTemplate==类，由于我们没有引入相关的依赖，它就不会执行自动化配置内容。所以，当我们发现有一些期望的配置没有生效时，就可以通过该端点来查看没有生效的具体原因。</p><h4 id="beans："><a href="#beans：" class="headerlink" title="/beans："></a><span id="2.1.2">/beans：</h4><p>该端点用来获取应用上下文中创建的所有Bean。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;context&quot;: &quot;hello:dev:8881&quot;,</span><br><span class="line">        &quot;parent&quot;: null,</span><br><span class="line">        &quot;beans&quot;: [</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;bean&quot;: &quot;org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration$DispatcherServletConfiguration&quot;,</span><br><span class="line">                &quot;scope&quot;: &quot;singleton&quot;,</span><br><span class="line">                &quot;type&quot;: &quot;org.springframework.boot.autoconfigure.web.DispatcherServletAutoConfiguration$DispatcherServletConfiguration$$EnhancerBySpringCGLIB$$3440282b&quot;,</span><br><span class="line">                &quot;resource&quot;: &quot;null&quot;,</span><br><span class="line">                &quot;dependencies&quot;: [</span><br><span class="line">                    &quot;serverProperties&quot;,</span><br><span class="line">                    &quot;spring.mvc.CONFIGURATION_PROPERTIES&quot;,</span><br><span class="line">                    &quot;multipartConfigElement&quot;</span><br><span class="line">                ]</span><br><span class="line">            &#125;,</span><br><span class="line">            &#123;</span><br><span class="line">                &quot;bean&quot;: &quot;dispatcherServlet&quot;,</span><br><span class="line">                &quot;scope&quot;: &quot;singleton&quot;,</span><br><span class="line">                &quot;type&quot;: &quot;org.springframework.web.servlet.DispatcherServlet&quot;,</span><br><span class="line">                &quot;resource&quot;: &quot;class path resource [org/springframework/boot/autoconfigure/web/DispatcherServletAutoConfiguration$DispatcherServletConfiguration.class]&quot;,</span><br><span class="line">                &quot;dependencies&quot;: []</span><br><span class="line">            &#125;</span><br><span class="line">        ]</span><br><span class="line">    &#125;</span><br><span class="line">]</span><br></pre></td></tr></table></figure><p>如上示例中，我们可以看到在每个bean中都包含了下面这几个信息：</p><ul><li><strong>bean</strong>：Bean的名称</li><li><strong>scope</strong>：Bean的作用域</li><li><strong>type</strong>：Bean的Java类型</li><li><strong>reource</strong>：class文件的具体路径</li><li><strong>dependencies</strong>：依赖的Bean名称</li></ul><h4 id="configprops："><a href="#configprops：" class="headerlink" title="/configprops："></a><span id="2.1.3">/configprops：</h4><p>该端点用来获取应用中配置的属性信息报告。从下面该端点返回示例的片段中，我们看到返回了关于该短信的配置信息，prefix属性代表了属性的配置前缀，properties代表了各个属性的名称和值。所以，我们可以通过该报告来看到各个属性的配置路径，比如我们要关闭该端点，就可以通过使用==endpoints.configprops.enabled=false==来完成设置。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;configurationPropertiesReportEndpoint&quot;: &#123;</span><br><span class="line">        &quot;prefix&quot;: &quot;endpoints.configprops&quot;,</span><br><span class="line">        &quot;properties&quot;: &#123;</span><br><span class="line">            &quot;id&quot;: &quot;configprops&quot;,</span><br><span class="line">            &quot;sensitive&quot;: true,</span><br><span class="line">            &quot;enabled&quot;: true</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="env："><a href="#env：" class="headerlink" title="/env："></a><span id="2.1.4">/env：</h4><p>该端点与<br>==/configprops==不同，它用来获取应用所有可用的环境属性报告。包括：环境变量、JVM属性、应用的配置配置、命令行中的参数。从下面该端点返回的示例片段中，我们可以看到它不仅返回了应用的配置属性，还返回了系统属性、环境变量等丰富的配置信息，其中也包括了应用还没有没有使用的配置。所以它可以帮助我们方便地看到当前应用可以加载的配置信息，并配合<br>==@ConfigurationProperties==注解将它们引入到我们的应用程序中来进行使用。另外，为了配置属性的安全，对于一些类似密码等敏感信息，该端点都会进行隐私保护，但是我们需要让属性名中包含：password、secret、key这些关键词，这样该端点在返回它们的时候会使用*来替代实际的属性值。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;profiles&quot;: [</span><br><span class="line">        &quot;dev&quot;</span><br><span class="line">    ],</span><br><span class="line">    &quot;server.ports&quot;: &#123;</span><br><span class="line">        &quot;local.server.port&quot;: 8881</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;servletContextInitParams&quot;: &#123;</span><br><span class="line">        </span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;systemProperties&quot;: &#123;</span><br><span class="line">        &quot;idea.version&quot;: &quot;2016.1.3&quot;,</span><br><span class="line">        &quot;java.runtime.name&quot;: &quot;Java(TM) SE Runtime Environment&quot;,</span><br><span class="line">        &quot;sun.boot.library.path&quot;: &quot;C:\\Program Files\\Java\\jdk1.8.0_91\\jre\\bin&quot;,</span><br><span class="line">        &quot;java.vm.version&quot;: &quot;25.91-b15&quot;,</span><br><span class="line">        &quot;java.vm.vendor&quot;: &quot;Oracle Corporation&quot;,</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;systemEnvironment&quot;: &#123;</span><br><span class="line">        &quot;configsetroot&quot;: &quot;C:\\WINDOWS\\ConfigSetRoot&quot;,</span><br><span class="line">        &quot;RABBITMQ_BASE&quot;: &quot;E:\\tools\\rabbitmq&quot;,</span><br><span class="line">        ...</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;applicationConfig: [classpath:/application-dev.properties]&quot;: &#123;</span><br><span class="line">        &quot;server.port&quot;: &quot;8881&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;applicationConfig: [classpath:/application.properties]&quot;: &#123;</span><br><span class="line">        &quot;server.port&quot;: &quot;8885&quot;,</span><br><span class="line">        &quot;spring.profiles.active&quot;: &quot;dev&quot;,</span><br><span class="line">        &quot;info.app.name&quot;: &quot;spring-boot-hello&quot;,</span><br><span class="line">        &quot;info.app.version&quot;: &quot;v1.0.0&quot;,</span><br><span class="line">        &quot;spring.application.name&quot;: &quot;hello&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="mappings："><a href="#mappings：" class="headerlink" title="/mappings："></a><span id="2.1.5">/mappings：</h4><p>该端点用来返回所有Spring MVC的控制器映射关系报告。从下面的示例片段中，我们可以看该报告的信息与我们在启用Spring MVC的Web应用时输出的日志信息类似，其中bean属性标识了该映射关系的请求处理器，method属性标识了该映射关系的具体处理类和处理函数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;/webjars/**&quot;: &#123;</span><br><span class="line">        &quot;bean&quot;: &quot;resourceHandlerMapping&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;/**&quot;: &#123;</span><br><span class="line">        &quot;bean&quot;: &quot;resourceHandlerMapping&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;/**/favicon.ico&quot;: &#123;</span><br><span class="line">        &quot;bean&quot;: &quot;faviconHandlerMapping&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;&#123;[/hello]&#125;&quot;: &#123;</span><br><span class="line">        &quot;bean&quot;: &quot;requestMappingHandlerMapping&quot;,</span><br><span class="line">        &quot;method&quot;: &quot;public java.lang.String com.didispace.web.HelloController.index()&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    &quot;&#123;[/mappings || /mappings.json],methods=[GET],produces=[application/json]&#125;&quot;: &#123;</span><br><span class="line">        &quot;bean&quot;: &quot;endpointHandlerMapping&quot;,</span><br><span class="line">        &quot;method&quot;: &quot;public java.lang.Object org.springframework.boot.actuate.endpoint.mvc.EndpointMvcAdapter.invoke()&quot;</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="info："><a href="#info：" class="headerlink" title="/info："></a><span id="2.1.6">/info：</h4><p>该端点用来返回一些应用自定义的信息。默认情况下，该端点只会返回一个空的json内容。我们可以在==application.properties==配置文件中通过info前缀来设置一些属性，比如下面这样：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">info.app.name=spring-boot-hello</span><br><span class="line">info.app.version=v1.0.0</span><br></pre></td></tr></table></figure><p>再访问/info端点，我们可以得到下面的返回报告，其中就包含了上面我们在应用自定义的两个参数。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">    &quot;app&quot;: &#123;</span><br><span class="line">        &quot;name&quot;: &quot;spring-boot-hello&quot;,</span><br><span class="line">        &quot;version&quot;: &quot;v1.0.0&quot;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><hr><h3 id="2-2-度量指标类"><a href="#2-2-度量指标类" class="headerlink" title="2.2 度量指标类"></a><span id="2.2">2.2 度量指标类</h3><p>上面我们所介绍的应用配置类端点所提供的信息报告在应用启动的时候都已经基本确定了其返回内容，可以说是一个静态报告。而度量指标类端点提供的报告内容则是动态变化的，这些端点提供了应用程序在运行过程中的一些快照信息，比如：内存使用情况、HTTP请求统计、外部资源指标等。这些端点对于我们构建微服务架构中的监控系统非常有帮助，由于Spring Boot应用自身实现了这些端点，所以我们可以很方便地利用它们来收集我们想要的信息，以制定出各种自动化策略。下面，我们就来分别看看这些强大的端点功能。</p><h4 id="metrics："><a href="#metrics：" class="headerlink" title="/metrics："></a><span id="2.2.1">/metrics：</h4><p>该端点用来返回当前应用的各类重要度量指标，比如：内存信息、线程信息、垃圾回收信息等。</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><span class="line">&#123;</span><br><span class="line">  &quot;mem&quot;: 541305,</span><br><span class="line">  &quot;mem.free&quot;: 317864,</span><br><span class="line">  &quot;processors&quot;: 8,</span><br><span class="line">  &quot;instance.uptime&quot;: 33376471,</span><br><span class="line">  &quot;uptime&quot;: 33385352,</span><br><span class="line">  &quot;systemload.average&quot;: -1,</span><br><span class="line">  &quot;heap.committed&quot;: 476672,</span><br><span class="line">  &quot;heap.init&quot;: 262144,</span><br><span class="line">  &quot;heap.used&quot;: 158807,</span><br><span class="line">  &quot;heap&quot;: 3701248,</span><br><span class="line">  &quot;nonheap.committed&quot;: 65856,</span><br><span class="line">  &quot;nonheap.init&quot;: 2496,</span><br><span class="line">  &quot;nonheap.used&quot;: 64633,</span><br><span class="line">  &quot;nonheap&quot;: 0,</span><br><span class="line">  &quot;threads.peak&quot;: 22,</span><br><span class="line">  &quot;threads.daemon&quot;: 20,</span><br><span class="line">  &quot;threads.totalStarted&quot;: 26,</span><br><span class="line">  &quot;threads&quot;: 22,</span><br><span class="line">  &quot;classes&quot;: 7669,</span><br><span class="line">  &quot;classes.loaded&quot;: 7669,</span><br><span class="line">  &quot;classes.unloaded&quot;: 0,</span><br><span class="line">  &quot;gc.ps_scavenge.count&quot;: 7,</span><br><span class="line">  &quot;gc.ps_scavenge.time&quot;: 118,</span><br><span class="line">  &quot;gc.ps_marksweep.count&quot;: 2,</span><br><span class="line">  &quot;gc.ps_marksweep.time&quot;: 234,</span><br><span class="line">  &quot;httpsessions.max&quot;: -1,</span><br><span class="line">  &quot;httpsessions.active&quot;: 0,</span><br><span class="line">  &quot;gauge.response.beans&quot;: 55,</span><br><span class="line">  &quot;gauge.response.env&quot;: 10,</span><br><span class="line">  &quot;gauge.response.hello&quot;: 5,</span><br><span class="line">  &quot;gauge.response.metrics&quot;: 4,</span><br><span class="line">  &quot;gauge.response.configprops&quot;: 153,</span><br><span class="line">  &quot;gauge.response.star-star&quot;: 5,</span><br><span class="line">  &quot;counter.status.200.beans&quot;: 1,</span><br><span class="line">  &quot;counter.status.200.metrics&quot;: 3,</span><br><span class="line">  &quot;counter.status.200.configprops&quot;: 1,</span><br><span class="line">  &quot;counter.status.404.star-star&quot;: 2,</span><br><span class="line">  &quot;counter.status.200.hello&quot;: 11,</span><br><span class="line">  &quot;counter.status.200.env&quot;: 1</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>从上面的示例中，我们看到有这些重要的度量值：</p><ul><li><strong>系统信息</strong>：包括处理器数量processors、运行时间uptime和instance.uptime、系统平均负载systemload.average。</li><li><strong>mem.*</strong>：内存概要信息，包括分配给应用的总内存数量以及当前空闲的内存数量。这些信息来自java.lang.Runtime。</li><li><strong>heap.*</strong>：堆内存使用情况。这些信息来自java.lang.management.MemoryMXBean接口中getHeapMemoryUsage方法获取的java.lang.management.MemoryUsage。</li><li><strong>nonheap.*</strong>：非堆内存使用情况。这些信息来自java.lang.management.MemoryMXBean接口中getNonHeapMemoryUsage方法获取的java.lang.management.MemoryUsage。</li><li><strong>threads.*</strong>：线程使用情况，包括线程数、守护线程数（daemon）、线程峰值（peak）等，这些数据均来自java.lang.management.ThreadMXBean。</li><li><strong>classes.*</strong>：应用加载和卸载的类统计。这些数据均来自java.lang.management.ClassLoadingMXBean。</li><li><strong>gc.*</strong>：垃圾收集器的详细信息，包括垃圾回收次数gc.ps_scavenge.count、垃圾回收消耗时间gc.ps_scavenge.time、标记-清除算法的次数gc.ps_marksweep.count、标记-清除算法的消耗时间gc.ps_marksweep.time。这些数据均来自java.lang.management.GarbageCollectorMXBean。</li><li><strong>httpsessions.*</strong>：Tomcat容器的会话使用情况。包括最大会话数httpsessions.max和活跃会话数httpsessions.active。该度量指标信息仅在引入了嵌入式Tomcat作为应用容器的时候才会提供。</li><li><strong>gauge.*</strong>：HTTP请求的性能指标之一，它主要用来反映一个绝对数值。比如上面示例中的gauge.response.hello: 5，它表示上一次hello请求的延迟时间为5毫秒。</li><li><strong>counter.*</strong>：HTTP请求的性能指标之一，它主要作为计数器来使用，记录了增加量和减少量。如上示例中counter.status.200.hello: 11，它代表了hello请求返回200状态的次数为11。</li></ul><p>对于<strong>gauge.*</strong>和<strong>counter.*</strong>的统计，这里有一个特殊的内容请求star-star，它代表了对静态资源的访问。这两类度量指标非常有用，我们不仅可以使用它默认的统计指标，还可以在程序中轻松的增加自定义统计值。只需要通过注入==org.springframework.boot.actuate.metrics.CounterService和org.springframework.boot.actuate.metrics.GaugeService==来实现自定义的统计指标信息。比如：我们可以像下面这样自定义实现对hello接口的访问次数统计。 </p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">@RestController</span><br><span class="line">public class HelloController &#123;</span><br><span class="line">    </span><br><span class="line">    @Autowired</span><br><span class="line">    private CounterService counterService;</span><br><span class="line"></span><br><span class="line">    @RequestMapping(&quot;/hello&quot;)</span><br><span class="line">    public String greet() &#123;</span><br><span class="line">        counterService.increment(&quot;didispace.hello.count&quot;);</span><br><span class="line">        return &quot;&quot;;</span><br><span class="line">    &#125;</span><br><span class="line">  </span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>/metrics端点可以提供应用运行状态的完整度量指标报告，这项功能非常的实用，但是对于监控系统中的各项监控功能，它们的监控内容、数据收集频率都有所不同，如果我们每次都通过全量获取报告的方式来收集，略显粗暴。所以，我们还可以通过/metrics/{name}接口来更细粒度的获取度量信息，比如我们可以通过访问/metrics/mem.free来获取当前可用内存数量。</p><h4 id="health："><a href="#health：" class="headerlink" title="/health："></a><span id="2.2.2">/health：</h4><p>该端点在一开始的示例中我们已经使用过了，它用来获取应用的各类健康指标信息。在spring-boot-starter-actuator模块中自带实现了一些常用资源的健康指标检测器。这些检测器都通过HealthIndicator接口实现，并且会根据依赖关系的引入实现自动化装配，比如用于检测磁盘的DiskSpaceHealthIndicator、检测DataSource连接是否可用的DataSourceHealthIndicator等。有时候，我们可能还会用到一些Spring Boot的Starter POMs中还没有封装的产品来进行开发，比如：当使用RocketMQ作为消息代理时，由于没有自动化配置的检测器，所以我们需要自己来实现一个用来采集健康信息的检测器。比如，我们可以在Spring Boot的应用中，为org.springframework.boot.actuate.health.HealthIndicator接口实现一个对RocketMQ的检测器类：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">@Component</span><br><span class="line">public class RocketMQHealthIndicator implements HealthIndicator &#123;</span><br><span class="line"></span><br><span class="line">    @Override</span><br><span class="line">    public Health health() &#123;</span><br><span class="line">        int errorCode = check();</span><br><span class="line">        if (errorCode != 0) &#123;</span><br><span class="line">          return Health.down().withDetail(&quot;Error Code&quot;, errorCode).build();</span><br><span class="line">        &#125;</span><br><span class="line">        return Health.up().build();</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line">  private int check() &#123;</span><br><span class="line">     // 对监控对象的检测操作</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>通过重写health()函数来实现健康检查，返回的Heath对象中，共有两项内容，一个是状态信息，除了该示例中的UP与DOWN之外，还有UNKNOWN和OUT_OF_SERVICE，可以根据需要来实现返回；还有一个详细信息，采用Map的方式存储，在这里通过withDetail函数，注入了一个Error Code信息，我们也可以填入一下其他信息，比如，检测对象的IP地址、端口等。重新启动应用，并访问/health接口，我们在返回的JSON字符串中，将会包含了如下信息：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;rocketMQ&quot;: &#123;</span><br><span class="line">  &quot;status&quot;: &quot;UP&quot;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><h4 id="dump："><a href="#dump：" class="headerlink" title="/dump："></a><span id="2.2.3">/dump：</h4><p>该端点用来暴露程序运行中的线程信息。它使用java.lang.management.ThreadMXBean的dumpAllThreads方法来返回所有含有同步信息的活动线程详情。</p><h4 id="trace："><a href="#trace：" class="headerlink" title="/trace："></a><span id="2.2.4">/trace：</h4><p>该端点用来返回基本的HTTP跟踪信息。默认情况下，跟踪信息的存储采用org.springframework.boot.actuate.trace.InMemoryTraceRepository实现的内存方式，始终保留最近的100条请求记录。它记录的内容格式如下：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br></pre></td><td class="code"><pre><span class="line">[</span><br><span class="line">    &#123;</span><br><span class="line">        &quot;timestamp&quot;: 1482570022463,</span><br><span class="line">        &quot;info&quot;: &#123;</span><br><span class="line">            &quot;method&quot;: &quot;GET&quot;,</span><br><span class="line">            &quot;path&quot;: &quot;/metrics/mem&quot;,</span><br><span class="line">            &quot;headers&quot;: &#123;</span><br><span class="line">                &quot;request&quot;: &#123;</span><br><span class="line">                    &quot;host&quot;: &quot;localhost:8881&quot;,</span><br><span class="line">                    &quot;connection&quot;: &quot;keep-alive&quot;,</span><br><span class="line">                    &quot;cache-control&quot;: &quot;no-cache&quot;,</span><br><span class="line">                    &quot;user-agent&quot;: &quot;Mozilla/5.0 (Windows NT 10.0; WOW64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36&quot;,</span><br><span class="line">                    &quot;postman-token&quot;: &quot;9817ea4d-ad9d-b2fc-7685-9dff1a1bc193&quot;,</span><br><span class="line">                    &quot;accept&quot;: &quot;*/*&quot;,</span><br><span class="line">                    &quot;accept-encoding&quot;: &quot;gzip, deflate, sdch&quot;,</span><br><span class="line">                    &quot;accept-language&quot;: &quot;zh-CN,zh;q=0.8&quot;</span><br><span class="line">                &#125;,</span><br><span class="line">                &quot;response&quot;: &#123;</span><br><span class="line">                    &quot;X-Application-Context&quot;: &quot;hello:dev:8881&quot;,</span><br><span class="line">                    &quot;Content-Type&quot;: &quot;application/json;charset=UTF-8&quot;,</span><br><span class="line">                    &quot;Transfer-Encoding&quot;: &quot;chunked&quot;,</span><br><span class="line">                    &quot;Date&quot;: &quot;Sat, 24 Dec 2016 09:00:22 GMT&quot;,</span><br><span class="line">                    &quot;status&quot;: &quot;200&quot;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;,</span><br><span class="line">    ...</span><br><span class="line">]</span><br></pre></td></tr></table></figure><h3 id="2-3-操作控制类"><a href="#2-3-操作控制类" class="headerlink" title="2.3 操作控制类"></a><span id="2.3">2.3 操作控制类</h3><p>仔细的读者可能会发现，我们在“初识Actuator”时运行示例的控制台中输出的所有监控端点，已经在介绍应用配置类端点和度量指标类端点时都讲解完了。那么还有哪些是操作控制类端点呢？实际上，由于之前介绍的所有端点都是用来反映应用自身的属性或是运行中的状态，相对于操作控制类端点没有那么敏感，所以他们默认都是启用的。而操作控制类端点拥有更强大的控制能力，如果要使用它们的话，需要通过属性来配置开启。</p><p>在原生端点中，只提供了一个用来关闭应用的端点：/shutdown。我们可以通过如下配置开启它：</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">endpoints.shutdown.enabled=true</span><br></pre></td></tr></table></figure><p>在配置了上述属性之后，只需要访问该应用的/shutdown端点就能实现关闭该应用的远程操作。由于开放关闭应用的操作本身是一件非常危险的事，所以真正在线上使用的时候，我们需要对其加入一定的保护机制，比如：定制Actuator的端点路径、整合Spring Security进行安全校验等。</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;Spring-Boot-Actuator监控端点&quot;&gt;&lt;a href=&quot;#Spring-Boot-Actuator监控端点&quot; class=&quot;headerlink&quot; title=&quot;Spring Boot Actuator监控端点&quot;&gt;&lt;/a&gt;Spring Boot Ac
      
    
    </summary>
    
    
      <category term="微服务" scheme="https://hicker000.github.io/categories/%E5%BE%AE%E6%9C%8D%E5%8A%A1/"/>
    
    
      <category term="SpringBoot" scheme="https://hicker000.github.io/tags/SpringBoot/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="https://hicker000.github.io/2019/11/10/hello-world/"/>
    <id>https://hicker000.github.io/2019/11/10/hello-world/</id>
    <published>2019-11-10T05:30:39.000Z</published>
    <updated>2019-11-10T08:13:48.919Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="发大水发达"><a href="#发大水发达" class="headerlink" title="发大水发达"></a>发大水发达</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
      <category term="测试" scheme="https://hicker000.github.io/categories/%E6%B5%8B%E8%AF%95/"/>
    
    
      <category term="测试-1" scheme="https://hicker000.github.io/tags/%E6%B5%8B%E8%AF%95-1/"/>
    
  </entry>
  
</feed>
